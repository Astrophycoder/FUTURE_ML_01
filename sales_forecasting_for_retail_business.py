# -*- coding: utf-8 -*-
"""Sales forecasting for retail business.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hKxnJW2G3M6frZVPE_tmoaUU2-aSIRZP
"""

pip install pandas prophet matplotlib scikit-learn numpy

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from prophet.diagnostics import cross_validation, performance_metrics
from prophet.plot import plot_plotly, plot_components_plotly
from sklearn.metrics import mean_absolute_error, mean_squared_error
# Load the CSV file with correct encoding
df = pd.read_csv('/content/sales_data_sample.csv', encoding='ISO-8859-1')

# Rename columns for Prophet
df['ds'] = pd.to_datetime(df['ORDERDATE'])
df['y'] = df['SALES']
df = df[['ds', 'y']]

# View the cleaned data
print(df.head())

# Split data into train and test
train = df.iloc[:-30]
test = df.iloc[-30:]

sdate=input("Enter the start date in yyyy-mm-dd format")
edate=input("Enter the end date in yyyy-mm-dd format")
# Create a DataFrame of holidays
holidays = pd.DataFrame({
    'holiday': 'holiday_name',
    'ds': pd.to_datetime([sdate, edate]),
    'lower_window': 0,
    'upper_window': 1,
})

model = Prophet(
    yearly_seasonality=True,
    weekly_seasonality=True,
    daily_seasonality=False,
    holidays=holidays,
    changepoint_prior_scale=0.05  # Tuning the flexibility of trend changes
)

model.fit(train)

future = model.make_future_dataframe(periods=30)
forecast = model.predict(future)

model.plot(forecast)
plt.title('Sales Forecast')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.show()

test_forecast = forecast[['ds', 'yhat']].set_index('ds').loc[test['ds']]
y_true = test['y'].values
y_pred = test_forecast['yhat'].values

mae = mean_absolute_error(y_true, y_pred)
rmse = np.sqrt(mean_squared_error(y_true, y_pred))

print(f"MAE: {mae:.2f}, RMSE: {rmse:.2f}")

model.plot_components(forecast)
plt.show()

df_cv = cross_validation(model, initial='365 days', period='180 days', horizon='90 days')
df_p = performance_metrics(df_cv)
print(df_p.head())

from prophet.plot import plot_plotly, plot_components_plotly
import warnings
import plotly.io as pio

# Set Colab renderer for Plotly
pio.renderers.default = 'colab'

# Remove microseconds to avoid nanosecond warning
forecast['ds'] = forecast['ds'].apply(lambda x: x.replace(microsecond=0))

# Optionally suppress the specific warning (if still appears)
warnings.filterwarnings("ignore", message="Discarding nonzero nanoseconds in conversion")

# Plot interactive forecast and components
plot_plotly(model, forecast)
plot_components_plotly(model, forecast)